{"version":3,"file":"bundle.es6.min.js","sources":["../../types/src/loglevel.ts","../../types/src/severity.ts","../../types/src/status.ts","../../utils/src/is.ts","../../utils/src/browser.ts","../../utils/src/polyfill.ts","../../utils/src/error.ts","../../utils/src/dsn.ts","../../utils/src/memo.ts","../../utils/src/stacktrace.ts","../../utils/src/string.ts","../../utils/src/object.ts","../../utils/src/node.ts","../../utils/src/misc.ts","../../utils/src/logger.ts","../../utils/src/syncpromise.ts","../../utils/src/promisebuffer.ts","../../utils/src/supports.ts","../../utils/src/instrument.ts","../../hub/src/scope.ts","../../hub/src/hub.ts","../../minimal/src/index.ts","../../core/src/api.ts","../../core/src/integration.ts","../../core/src/baseclient.ts","../../core/src/transports/noop.ts","../../core/src/basebackend.ts","../../core/src/request.ts","../../core/src/integrations/functiontostring.ts","../../core/src/integrations/inboundfilters.ts","../src/tracekit.ts","../src/parsers.ts","../src/eventbuilder.ts","../src/transports/base.ts","../src/transports/fetch.ts","../src/transports/xhr.ts","../src/backend.ts","../src/helpers.ts","../src/integrations/globalhandlers.ts","../src/integrations/trycatch.ts","../src/integrations/breadcrumbs.ts","../src/integrations/linkederrors.ts","../src/integrations/useragent.ts","../src/version.ts","../src/client.ts","../src/sdk.ts","../src/index.ts","../../core/src/sdk.ts"],"sourcesContent":["/** Console logging verbosity for the SDK. */\nexport enum LogLevel {\n  /** No logs will be generated. */\n  None = 0,\n  /** Only SDK internal errors will be logged. */\n  Error = 1,\n  /** Information useful for debugging the SDK will be logged. */\n  Debug = 2,\n  /** All SDK actions will be logged. */\n  Verbose = 3,\n}\n","/** JSDoc */\n// eslint-disable-next-line import/export\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n","/** The status of an event. */\n// eslint-disable-next-line import/export\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: any): boolean {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: any): boolean {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: any): boolean {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: any): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: any): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(`#${elem.id}`);\n  }\n\n  // eslint-disable-next-line prefer-const\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(`.${classes[i]}`);\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore __proto__ does not exist on obj\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (!obj.hasOwnProperty(prop)) {\n      // @ts-ignore typescript complains about indexing so we remove\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key. */\n  public user!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    const { host, path, pass, port, projectId, protocol, user } = this;\n    return (\n      `${protocol}://${user}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, user, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, user });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'user', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\nexport class Memo {\n  /** Determines if WeakSet is available */\n  private readonly _hasWeakSet: boolean;\n  /** Either WeakSet or Array */\n  private readonly _inner: any;\n\n  public constructor() {\n    this._hasWeakSet = typeof WeakSet === 'function';\n    this._inner = this._hasWeakSet ? new WeakSet() : [];\n  }\n\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n  public memoize(obj: any): boolean {\n    if (this._hasWeakSet) {\n      if (this._inner.has(obj)) {\n        return true;\n      }\n      this._inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < this._inner.length; i++) {\n      const value = this._inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    this._inner.push(obj);\n    return false;\n  }\n\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n  public unmemoize(obj: any): void {\n    if (this._hasWeakSet) {\n      this._inner.delete(obj);\n    } else {\n      for (let i = 0; i < this._inner.length; i++) {\n        if (this._inner[i] === obj) {\n          this._inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n}\n","const defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n","import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const ll = newLine.length;\n  if (ll <= 150) {\n    return newLine;\n  }\n  if (colno > ll) {\n    // eslint-disable-next-line no-param-reassign\n    colno = ll;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, ll);\n  if (end > ll - 5) {\n    end = ll;\n  }\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return (pattern as RegExp).test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { getFunctionName } from './stacktrace';\nimport { truncate } from './string';\n\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacement A function that should be used to wrap a given method.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacement: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacement(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry_original__: {\n          enumerable: false,\n          value: original,\n        },\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all it's attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order to be usable by the serializer\n */\nfunction getWalkSource(\n  value: any,\n): {\n  [key: string]: any;\n} {\n  if (isError(value)) {\n    const error = value as ExtendedError;\n    const err: {\n      [key: string]: any;\n      stack: string | undefined;\n      message: string;\n      name: string;\n    } = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    };\n\n    for (const i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    /**\n     * Event-like interface that's usable in browser and node\n     */\n    interface SimpleEvent {\n      [key: string]: unknown;\n      type: string;\n      target?: unknown;\n      currentTarget?: unknown;\n    }\n\n    const event = value as SimpleEvent;\n\n    const source: {\n      [key: string]: any;\n    } = {};\n\n    source.type = event.type;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      source.target = isElement(event.target)\n        ? htmlTreeAsString(event.target)\n        : Object.prototype.toString.call(event.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(event.currentTarget)\n        ? htmlTreeAsString(event.currentTarget)\n        : Object.prototype.toString.call(event.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      source.detail = event.detail;\n    }\n\n    for (const i in event) {\n      if (Object.prototype.hasOwnProperty.call(event, i)) {\n        source[i] = event;\n      }\n    }\n\n    return source;\n  }\n\n  return value as {\n    [key: string]: any;\n  };\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/** Transforms any input value into a string form, either primitive value or a type of the input */\nfunction serializeValue(value: any): any {\n  const type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  const normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\nfunction normalizeValue<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && value && typeof value === 'object' && ((value as unknown) as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${getFunctionName(value)}]`;\n  }\n\n  return value;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function walk(key: string, value: any, depth: number = +Infinity, memo: Memo = new Memo()): any {\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // If value implements `toJSON` method, call it and return early\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  const normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    (acc as { [key: string]: any })[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function normalize(input: any, depth?: number): any {\n  try {\n    return JSON.parse(JSON.stringify(input, (key: string, value: any) => walk(key, value, depth)));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  const keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys<T>(val: T): T {\n  if (isPlainObject(val)) {\n    const obj = val as { [key: string]: any };\n    const rv: { [key: string]: any } = {};\n    for (const key of Object.keys(obj)) {\n      if (typeof obj[key] !== 'undefined') {\n        rv[key] = dropUndefinedKeys(obj[key]);\n      }\n    }\n    return rv as T;\n  }\n\n  if (Array.isArray(val)) {\n    return val.map(dropUndefinedKeys) as any;\n  }\n\n  return val;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtractedNodeRequestData } from '@sentry/types';\n\nimport { isString } from './is';\nimport { normalize } from './object';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/** Default request keys that'll be used to extract data from the request */\nconst DEFAULT_REQUEST_KEYS = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\n\n/**\n * Normalizes data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param keys An optional array of keys to include in the normalized data. Defaults to DEFAULT_REQUEST_KEYS if not\n * provided.\n * @returns An object containing normalized request data\n */\nexport function extractNodeRequestData(\n  req: { [key: string]: any },\n  keys: string[] = DEFAULT_REQUEST_KEYS,\n): ExtractedNodeRequestData {\n  // make sure we can safely use dynamicRequire below\n  if (!isNodeEnv()) {\n    throw new Error(\"Can't get node request data outside of a node environment\");\n  }\n\n  const requestData: { [key: string]: any } = {};\n\n  // headers:\n  //   node, express: req.headers\n  //   koa: req.header\n  const headers = (req.headers || req.header || {}) as {\n    host?: string;\n    cookie?: string;\n  };\n  // method:\n  //   node, express, koa: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node: req.headers.host\n  const host = req.hostname || req.host || headers.host || '<no host>';\n  // protocol:\n  //   node: <n/a>\n  //   express, koa: req.protocol\n  const protocol =\n    req.protocol === 'https' || req.secure || ((req.socket || {}) as { encrypted?: boolean }).encrypted\n      ? 'https'\n      : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa: req.url\n  const originalUrl = (req.originalUrl || req.url) as string;\n  // absolute url\n  const absoluteUrl = `${protocol}://${host}${originalUrl}`;\n\n  keys.forEach(key => {\n    switch (key) {\n      case 'headers':\n        requestData.headers = headers;\n        break;\n      case 'method':\n        requestData.method = method;\n        break;\n      case 'url':\n        requestData.url = absoluteUrl;\n        break;\n      case 'cookies':\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies = dynamicRequire(module, 'cookie').parse(headers.cookie || '');\n        break;\n      case 'query_string':\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = dynamicRequire(module, 'url').parse(originalUrl || '', false).query;\n        break;\n      case 'data':\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        }\n        // body data:\n        //   node, express, koa: req.body\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n        break;\n      default:\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = (req as { [key: string]: any })[key];\n        }\n    }\n  });\n\n  return requestData;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Integration, StackFrame, WrappedFunction } from '@sentry/types';\n\nimport { dynamicRequire, isNodeEnv } from './node';\nimport { snipLine } from './string';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (isNodeEnv()\n    ? global\n    : typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : fallbackGlobalObject) as T & SentryGlobal;\n}\n\n/**\n * Determines if running in react native\n */\nexport function isReactNative(): boolean {\n  return getGlobalObject<Window>().navigator?.product === 'ReactNative';\n}\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // eslint-disable-next-line no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // eslint-disable-next-line no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // eslint-disable-next-line no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // eslint-disable-next-line no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/** JSDoc */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n  const levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const originalConsole = (global as any).console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in (global as any).console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n\n/**\n * Adds exception mechanism to a given event.\n * @param event The event to modify.\n * @param mechanism Mechanism of the mechanism.\n * @hidden\n */\nexport function addExceptionMechanism(\n  event: Event,\n  mechanism: {\n    [key: string]: any;\n  } = {},\n): void {\n  // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?\n  try {\n    // @ts-ignore Type 'Mechanism | {}' is not assignable to type 'Mechanism | undefined'\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values![0].mechanism = event.exception!.values![0].mechanism || {};\n    Object.keys(mechanism).forEach(key => {\n      // @ts-ignore Mechanism has no index signature\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      event.exception!.values![0].mechanism[key] = mechanism[key];\n    });\n  } catch (_oO) {\n    // no-empty\n  }\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\nconst INITIAL_TIME = Date.now();\nlet prevNow = 0;\n\n/**\n * Cross platform compatible partial performance implementation\n */\ninterface CrossPlatformPerformance {\n  timeOrigin: number;\n  /**\n   * Returns the current timestamp in ms\n   */\n  now(): number;\n}\n\nconst performanceFallback: CrossPlatformPerformance = {\n  now(): number {\n    let now = Date.now() - INITIAL_TIME;\n    if (now < prevNow) {\n      now = prevNow;\n    }\n    prevNow = now;\n    return now;\n  },\n  timeOrigin: INITIAL_TIME,\n};\n\n/**\n * Performance wrapper for react native as performance.now() has been found to start off with an unusual offset.\n */\nfunction getReactNativePerformanceWrapper(): CrossPlatformPerformance {\n  // Performance only available >= RN 0.63\n  const { performance } = getGlobalObject<Window>();\n  if (performance && typeof performance.now === 'function') {\n    const INITIAL_OFFSET = performance.now();\n\n    return {\n      now(): number {\n        return performance.now() - INITIAL_OFFSET;\n      },\n      timeOrigin: INITIAL_TIME,\n    };\n  }\n  return performanceFallback;\n}\n\nexport const crossPlatformPerformance: CrossPlatformPerformance = ((): CrossPlatformPerformance => {\n  // React Native's performance.now() starts with a gigantic offset, so we need to wrap it.\n  if (isReactNative()) {\n    return getReactNativePerformanceWrapper();\n  }\n\n  if (isNodeEnv()) {\n    try {\n      const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: CrossPlatformPerformance };\n      return perfHooks.performance;\n    } catch (_) {\n      return performanceFallback;\n    }\n  }\n\n  const { performance } = getGlobalObject<Window>();\n\n  if (!performance || !performance.now) {\n    return performanceFallback;\n  }\n\n  // Polyfill for performance.timeOrigin.\n  //\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  if (performance.timeOrigin === undefined) {\n    // As of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always a\n    // valid fallback. In the absence of a initial time provided by the browser, fallback to INITIAL_TIME.\n    // @ts-ignore ignored because timeOrigin is a readonly property but we want to override\n    // eslint-disable-next-line deprecation/deprecation\n    performance.timeOrigin = (performance.timing && performance.timing.navigationStart) || INITIAL_TIME;\n  }\n\n  return performance;\n})();\n\n/**\n * Returns a timestamp in seconds with milliseconds precision since the UNIX epoch calculated with the monotonic clock.\n */\nexport function timestampWithMs(): number {\n  return (crossPlatformPerformance.timeOrigin + crossPlatformPerformance.now()) / 1000;\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\nconst defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\nexport function parseRetryAfterHeader(now: number, header?: string | number | null): number {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`);\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nenum States {\n  /** Pending */\n  PENDING = 'PENDING',\n  /** Resolved / OK */\n  RESOLVED = 'RESOLVED',\n  /** Rejected / Error */\n  REJECTED = 'REJECTED',\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<{\n    done: boolean;\n    onfulfilled?: ((value: T) => T | PromiseLike<T>) | null;\n    onrejected?: ((reason: any) => any) | null;\n  }> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public static resolve<T>(value: T | PromiseLike<T>): PromiseLike<T> {\n    return new SyncPromise(resolve => {\n      resolve(value);\n    });\n  }\n\n  /** JSDoc */\n  public static reject<T = never>(reason?: any): PromiseLike<T> {\n    return new SyncPromise((_, reject) => {\n      reject(reason);\n    });\n  }\n\n  /** JSDoc */\n  public static all<U = any>(collection: Array<U | PromiseLike<U>>): PromiseLike<U[]> {\n    return new SyncPromise<U[]>((resolve, reject) => {\n      if (!Array.isArray(collection)) {\n        reject(new TypeError(`Promise.all requires an array as input.`));\n        return;\n      }\n\n      if (collection.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      let counter = collection.length;\n      const resolvedCollection: U[] = [];\n\n      collection.forEach((item, index) => {\n        SyncPromise.resolve(item)\n          .then(value => {\n            resolvedCollection[index] = value;\n            counter -= 1;\n\n            if (counter !== 0) {\n              return;\n            }\n            resolve(resolvedCollection);\n          })\n          .then(null, reject);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._attachHandler({\n        done: false,\n        onfulfilled: result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n            return;\n          }\n          try {\n            resolve(onfulfilled(result));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n        onrejected: reason => {\n          if (!onrejected) {\n            reject(reason);\n            return;\n          }\n          try {\n            resolve(onrejected(reason));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n      });\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve((val as unknown) as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public toString(): string {\n    return '[object SyncPromise]';\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  // TODO: FIXME\n  /** JSDoc */\n  private readonly _attachHandler = (handler: {\n    /** JSDoc */\n    done: boolean;\n    /** JSDoc */\n    onfulfilled?(value: T): any;\n    /** JSDoc */\n    onrejected?(reason: any): any;\n  }) => {\n    this._handlers = this._handlers.concat(handler);\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler.done) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        if (handler.onfulfilled) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          handler.onfulfilled((this._value as unknown) as any);\n        }\n      }\n\n      if (this._state === States.REJECTED) {\n        if (handler.onrejected) {\n          handler.onrejected(this._value);\n        }\n      }\n\n      handler.done = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  public constructor(protected _limit?: number) {}\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  public add(task: PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task\n      .then(() => this.remove(task))\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n","import { logger } from './logger';\nimport { getGlobalObject } from './misc';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === `function`) {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { getGlobalObject } from './misc';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\n/** Object describing handler that will be triggered for a given `type` of instrumentation */\ninterface InstrumentHandler {\n  type: InstrumentHandlerType;\n  callback: InstrumentHandlerCallback;\n}\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler: InstrumentHandler): void {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  (handlers[handler.type] as InstrumentHandlerCallback[]).push(handler.callback);\n  instrument(handler.type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      logger.error(\n        `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(\n          handler,\n        )}\\nError: ${e}`,\n      );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function(originalConsoleLevel: () => any): Function {\n      return function(...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function(originalFetch: () => void): () => void {\n    return function(...args: any[]): void {\n      const commonHandlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...commonHandlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...commonHandlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...commonHandlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  // Poor man implementation of ES6 `Map` by tracking and keeping in sync key and value separately.\n  const requestKeys: XMLHttpRequest[] = [];\n  const requestValues: Array<any>[] = [];\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function(originalOpen: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function(): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          try {\n            const requestPos = requestKeys.indexOf(xhr);\n            if (requestPos !== -1) {\n              // Make sure to pop both, key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              const args = requestValues.splice(requestPos)[0];\n              if (xhr.__sentry_xhr__ && args[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args[0] as XHRSendInput;\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function(original: WrappedFunction): Function {\n          return function(...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function(originalSend: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      requestKeys.push(this);\n      requestValues.push(args);\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function(this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      return oldOnPopState.apply(this, args);\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function(this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n  // to the document. Do this before we instrument addEventListener.\n  global.document.addEventListener('click', domEventHandler('click', triggerHandlers.bind(null, 'dom')), false);\n  global.document.addEventListener('keypress', keypressEventHandler(triggerHandlers.bind(null, 'dom')), false);\n\n  // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n\n    // eslint-disable-next-line no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ) => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerOrEventListenerObject, capture?: boolean, secure?: boolean) => void {\n        if (fn && (fn as EventListenerObject).handleEvent) {\n          if (eventName === 'click') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                domEventHandler('click', triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n          if (eventName === 'keypress') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                keypressEventHandler(triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n        } else {\n          if (eventName === 'click') {\n            domEventHandler('click', triggerHandlers.bind(null, 'dom'), true)(this);\n          }\n          if (eventName === 'keypress') {\n            keypressEventHandler(triggerHandlers.bind(null, 'dom'))(this);\n          }\n        }\n\n        return original.call(this, eventName, fn, options);\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n    ): (\n      this: any,\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions,\n    ) => () => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        try {\n          original.call(this, eventName, ((fn as unknown) as WrappedFunction).__sentry_wrapped__, options);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, fn, options);\n      };\n    });\n  });\n}\n\nconst debounceDuration: number = 1000;\nlet debounceTimer: number = 0;\nlet keypressTimeout: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param name the event name (e.g. \"click\")\n * @param handler function that will be triggered\n * @param debounce decides whether it should wait till another event loop\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction domEventHandler(name: string, handler: Function, debounce: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // reset keypress timeout; e.g. triggering a 'click' after\n    // a 'keypress' will reset the keypress debounce so that a new\n    // set of keypresses can be recorded\n    keypressTimeout = undefined;\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors). Ignore if we've\n    // already captured the event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    lastCapturedEvent = event;\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    if (debounce) {\n      debounceTimer = setTimeout(() => {\n        handler({ event, name });\n      });\n    } else {\n      handler({ event, name });\n    }\n  };\n}\n\n/**\n * Wraps addEventListener to capture keypress UI events\n * @param handler function that will be triggered\n * @returns wrapped keypress events handler\n * @hidden\n */\nfunction keypressEventHandler(handler: Function): (event: Event) => void {\n  // TODO: if somehow user switches keypress target before\n  //       debounce timeout is triggered, we will only capture\n  //       a single breadcrumb from the FIRST target (acceptable?)\n  return (event: Event): void => {\n    let target;\n\n    try {\n      target = event.target;\n    } catch (e) {\n      // just accessing event properties can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/raven-js/issues/838\n      return;\n    }\n\n    const tagName = target && (target as HTMLElement).tagName;\n\n    // only consider keypress events on actual input elements\n    // this will disregard keypresses targeting body (e.g. tabbing\n    // through elements, hotkeys, etc)\n    if (!tagName || (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !(target as HTMLElement).isContentEditable)) {\n      return;\n    }\n\n    // record first keypress in a series, but ignore subsequent\n    // keypresses until debounce clears\n    if (!keypressTimeout) {\n      domEventHandler('input', handler)(event);\n    }\n    clearTimeout(keypressTimeout);\n\n    keypressTimeout = (setTimeout(() => {\n      keypressTimeout = undefined;\n    }, debounceDuration) as any) as number;\n  };\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function(e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { getGlobalObject, isPlainObject, isThenable, SyncPromise, timestampWithMs } from '@sentry/utils';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: string } = {};\n\n  /** Extra */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected _extra: { [key: string]: any } = {};\n\n  /** Contexts */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected _contexts: { [key: string]: any } = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(key: string, context: { [key: string]: any } | null): this {\n    this._contexts = { ...this._contexts, [key]: context };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    const span = this.getSpan() as Span & { spanRecorder: { spans: Span[] } };\n    if (span && span.spanRecorder && span.spanRecorder.spans[0]) {\n      return span.spanRecorder.spans[0] as Transaction;\n    }\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const mergedBreadcrumb = {\n      timestamp: timestampWithMs(),\n      ...breadcrumb,\n    };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, mergedBreadcrumb].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, mergedBreadcrumb];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      setTimeout(() => {\n        this._scopeListeners.forEach(callback => {\n          callback(this);\n        });\n        this._notifyingListeners = false;\n      });\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  const global = getGlobalObject<Window | NodeJS.Global>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Severity,\n  Span,\n  SpanContext,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, getGlobalObject, isNodeEnv, logger, timestampWithMs, uuid4 } from '@sentry/utils';\n\nimport { Carrier, DomainAsCarrier, Layer } from './interfaces';\nimport { Scope } from './scope';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 3;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Absolute maximum number of breadcrumbs added to an event. The\n * `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this._stack.push({ client, scope });\n    this.bindClient(client);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const stack = this.getStack();\n    const parentScope = stack.length > 0 ? stack[stack.length - 1].scope : undefined;\n    const scope = Scope.clone(parentScope);\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    return this.getStack().pop() !== undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: exception,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureException', exception, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: message,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this._invokeClient('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const top = this.getStackTop();\n\n    if (!top.scope || !top.client) {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (top.client.getOptions && top.client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) {\n      return;\n    }\n\n    const timestamp = timestampWithMs();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) {\n      return;\n    }\n\n    top.scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const top = this.getStackTop();\n    if (top.scope && top.client) {\n      callback(top.scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) {\n      return null;\n    }\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSpan(context: SpanContext): Span {\n    return this._callExtensionMethod('startSpan', context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _invokeClient<M extends keyof Client>(method: M, ...args: any[]): void {\n    const top = this.getStackTop();\n    if (top && top.client && top.client[method]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      (top.client as any)[method](...args, top.scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/** Returns the global shim registry. */\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Returns the active domain, if one exists\n *\n * @returns The domain, or undefined if there is no active domain\n */\nexport function getActiveDomain(): DomainAsCarrier | undefined {\n  const sentry = getMainCarrier().__SENTRY__;\n\n  return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const activeDomain = getActiveDomain();\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return carrier.__SENTRY__.hub;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) {\n    return false;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n","import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  Extra,\n  Extras,\n  Severity,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): string {\n  let syntheticException: Error;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureException', exception, {\n    captureContext,\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | Severity): string {\n  let syntheticException: Error;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n    ...context,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: string }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n * @param key String key of tag\n * @param value String value of tag\n */\nexport function setTag(key: string, value: string): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  return callOnHub('startTransaction', { ...context }, customSamplingContext);\n}\n","import { DsnLike } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    const base = this.getBaseApiEndpoint();\n    const dsn = this._dsnObject;\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames: string[] = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(defaultIntegration => {\n      if (\n        userIntegrationsNames.indexOf(defaultIntegration.name) === -1 &&\n        pickedIntegrationsNames.indexOf(defaultIntegration.name) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(defaultIntegration.name);\n      }\n    });\n\n    // Don't add same user integration twice\n    userIntegrations.forEach(userIntegration => {\n      if (pickedIntegrationsNames.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = [...defaultIntegrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n","/* eslint-disable max-lines */\nimport { Scope } from '@sentry/hub';\nimport { Client, Event, EventHint, Integration, IntegrationClass, Options, Severity } from '@sentry/types';\nimport {\n  Dsn,\n  isPrimitive,\n  isThenable,\n  logger,\n  normalize,\n  SyncPromise,\n  timestampWithMs,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Is the client still processing a call? */\n  protected _processing: boolean = false;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._getBackend()\n      .eventFromException(exception, hint)\n      .then(event => {\n        eventId = this.captureEvent(event, hint, scope);\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(`${message}`, level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    promisedEvent.then(event => {\n      eventId = this.captureEvent(event, hint, scope);\n    });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    this._processEvent(event, hint, scope)\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .then(null, reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientProcessing(timeout).then(status => {\n      clearInterval(status.interval);\n      return this._getBackend()\n        .getTransport()\n        .close(timeout)\n        .then(transportFlushed => status.ready && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Waits for the client to be done with processing. */\n  protected _isClientProcessing(timeout?: number): PromiseLike<{ ready: boolean; interval: number }> {\n    return new SyncPromise<{ ready: boolean; interval: number }>(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      let interval = 0;\n      clearInterval(interval);\n\n      interval = (setInterval(() => {\n        if (!this._processing) {\n          resolve({\n            interval,\n            ready: true,\n          });\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            resolve({\n              interval,\n              ready: false,\n            });\n          }\n        }\n      }, tick) as unknown) as number;\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || timestampWithMs(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const { environment, release, dist, maxValueLength = 250 } = this.getOptions();\n\n    if (event.environment === undefined && environment !== undefined) {\n      event.environment = environment;\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const sdkInfo = event.sdk;\n    const integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject('SDK not enabled, will not send event.');\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject('This event has been sampled, will not send event.');\n    }\n\n    return new SyncPromise((resolve, reject) => {\n      this._prepareEvent(event, scope, hint)\n        .then(prepared => {\n          if (prepared === null) {\n            reject('An event processor returned null, will not send event.');\n            return;\n          }\n\n          let finalEvent: Event | null = prepared;\n\n          const isInternalException =\n            hint && hint.data && (hint.data as { [key: string]: unknown }).__sentry__ === true;\n          // We skip beforeSend in case of transactions\n          if (isInternalException || !beforeSend || isTransaction) {\n            this._sendEvent(finalEvent);\n            resolve(finalEvent);\n            return;\n          }\n\n          const beforeSendResult = beforeSend(prepared, hint);\n          if (typeof beforeSendResult === 'undefined') {\n            logger.error('`beforeSend` method has to return `null` or a valid event.');\n          } else if (isThenable(beforeSendResult)) {\n            this._handleAsyncBeforeSend(beforeSendResult as PromiseLike<Event | null>, resolve, reject);\n          } else {\n            finalEvent = beforeSendResult as Event | null;\n\n            if (finalEvent === null) {\n              logger.log('`beforeSend` returned `null`, will not send event.');\n              resolve(null);\n              return;\n            }\n\n            // From here on we are really async\n            this._sendEvent(finalEvent);\n            resolve(finalEvent);\n          }\n        })\n        .then(null, reason => {\n          this.captureException(reason, {\n            data: {\n              __sentry__: true,\n            },\n            originalException: reason as Error,\n          });\n          reject(\n            `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n          );\n        });\n    });\n  }\n\n  /**\n   * Resolves before send Promise and calls resolve/reject on parent SyncPromise.\n   */\n  private _handleAsyncBeforeSend(\n    beforeSend: PromiseLike<Event | null>,\n    resolve: (event: Event) => void,\n    reject: (reason: string) => void,\n  ): void {\n    beforeSend\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          reject('`beforeSend` returned `null`, will not send event.');\n          return;\n        }\n        // From here on we are really async\n        this._sendEvent(processedEvent);\n        resolve(processedEvent);\n      })\n      .then(null, e => {\n        reject(`beforeSend rejected with ${e}`);\n      });\n  }\n}\n","import { Event, Response, Status, Transport } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return SyncPromise.resolve({\n      reason: `NoopTransport: Event has been skipped because no Dsn is configured.`,\n      status: Status.Skipped,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return SyncPromise.resolve(true);\n  }\n}\n","import { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instanciate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates a {@link Event} from an exception. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates a {@link Event} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instanciate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    this._transport.sendEvent(event).then(null, reason => {\n      logger.error(`Error while sending event: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n}\n","import { Event } from '@sentry/types';\nimport { timestampWithMs } from '@sentry/utils';\n\nimport { API } from './api';\n\n/** A generic client request. */\nexport interface SentryRequest {\n  body: string;\n  url: string;\n  // headers would contain auth & content-type headers for @sentry/node, but\n  // since @sentry/browser avoids custom headers to prevent CORS preflight\n  // requests, we can use the same approach for @sentry/browser and @sentry/node\n  // for simplicity -- no headers involved.\n  // headers: { [key: string]: string };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: API): SentryRequest {\n  const useEnvelope = event.type === 'transaction';\n\n  const req: SentryRequest = {\n    body: JSON.stringify(event),\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      // We need to add * 1000 since we divide it by 1000 by default but JS works with ms precision\n      // The reason we use timestampWithMs here is that all clocks across the SDK use the same clock\n      sent_at: new Date(timestampWithMs() * 1000).toISOString(),\n    });\n    const itemHeaders = JSON.stringify({\n      type: event.type,\n      // The content-type is assumed to be 'application/json' and not part of\n      // the current spec for transaction items, so we don't bloat the request\n      // body with it.\n      //\n      // content_type: 'application/json',\n      //\n      // The length is optional. It must be the number of bytes in req.Body\n      // encoded as UTF-8. Since the server can figure this out and would\n      // otherwise refuse events that report the length incorrectly, we decided\n      // not to send the length to avoid problems related to reporting the wrong\n      // size and to reduce request body size.\n      //\n      // length: new TextEncoder().encode(req.body).length,\n    });\n    // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n    const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}`;\n    req.body = envelope;\n  }\n\n  return req;\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry_original__ || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Event, Integration } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n\n  /** @deprecated use {@link InboundFiltersOptions.allowUrls} instead. */\n  whitelistUrls: Array<string | RegExp>;\n  /** @deprecated use {@link InboundFiltersOptions.denyUrls} instead. */\n  blacklistUrls: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient();\n        const clientOptions = client ? client.getOptions() : {};\n        const options = self._mergeOptions(clientOptions);\n        if (self._shouldDropEvent(event, options)) {\n          return null;\n        }\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (this._isSentryError(event, options)) {\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this._isIgnoredError(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this._isDeniedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this._isAllowedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSentryError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      return (\n        (event &&\n          event.exception &&\n          event.exception.values &&\n          event.exception.values[0] &&\n          event.exception.values[0].type === 'SentryError') ||\n        false\n      );\n    } catch (_oO) {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private _isIgnoredError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  private _isDeniedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.denyUrls || !options.denyUrls.length) {\n      return false;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? false : options.denyUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _isAllowedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.allowUrls || !options.allowUrls.length) {\n      return true;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? true : options.allowUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _mergeOptions(clientOptions: Partial<InboundFiltersOptions> = {}): Partial<InboundFiltersOptions> {\n    return {\n      allowUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.whitelistUrls || []),\n        ...(this._options.allowUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.whitelistUrls || []),\n        ...(clientOptions.allowUrls || []),\n      ],\n      denyUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.blacklistUrls || []),\n        ...(this._options.denyUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.blacklistUrls || []),\n        ...(clientOptions.denyUrls || []),\n      ],\n      ignoreErrors: [\n        ...(this._options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n    };\n  }\n\n  /** JSDoc */\n  private _getPossibleEventMessages(event: Event): string[] {\n    if (event.message) {\n      return [event.message];\n    }\n    if (event.exception) {\n      try {\n        const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    }\n    return [];\n  }\n\n  /** JSDoc */\n  private _getEventFilterUrl(event: Event): string | null {\n    try {\n      if (event.stacktrace) {\n        const frames = event.stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      if (event.exception) {\n        const frames =\n          event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      return null;\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/**\n * An object representing a single stack frame.\n * {Object} StackFrame\n * {string} url The JavaScript or HTML file URL.\n * {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * {string[]?} args The arguments passed to the function, if known.\n * {number=} line The line number, if known.\n * {number=} column The column number, if known.\n * {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n */\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number | null;\n  column: number | null;\n}\n\n/**\n * An object representing a JavaScript stack trace.\n * {Object} StackTrace\n * {string} name The name of the thrown exception.\n * {string} message The exception error message.\n * {TraceKit.StackFrame[]} stack An array of stack frames.\n */\nexport interface StackTrace {\n  name: string;\n  message: string;\n  mechanism?: string;\n  stack: StackFrame[];\n  failed?: boolean;\n}\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js))(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nconst geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nconst chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function computeStackTrace(ex: any): StackTrace {\n  let stack = null;\n  let popSize = 0;\n\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      popSize = ex.framesToPop;\n    } else if (reactMinifiedRegexp.test(ex.message)) {\n      popSize = 1;\n    }\n  }\n\n  try {\n    // This must be tried first because Opera 10 *destroys*\n    // its stacktrace property if you try to access the stack\n    // property first!!\n    stack = computeStackTraceFromStacktraceProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex && ex.name,\n    stack: [],\n    failed: true,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity\nfunction computeStackTraceFromStackProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stack) {\n    return null;\n  }\n\n  const stack = [];\n  const lines = ex.stack.split('\\n');\n  let isEval;\n  let submatch;\n  let parts;\n  let element;\n\n  for (let i = 0; i < lines.length; ++i) {\n    if ((parts = chrome.exec(lines[i]))) {\n      const isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n      if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = submatch[1]; // url\n        parts[3] = submatch[2]; // line\n        parts[4] = submatch[3]; // column\n      }\n      element = {\n        // working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n        // prefix here seems like the quickest solution for now.\n        url: parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: isNative ? [parts[2]] : [],\n        line: parts[3] ? +parts[3] : null,\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = winjs.exec(lines[i]))) {\n      element = {\n        url: parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: [],\n        line: +parts[3],\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = gecko.exec(lines[i]))) {\n      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n      if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || `eval`;\n        parts[3] = submatch[1];\n        parts[4] = submatch[2];\n        parts[5] = ''; // no column when eval\n      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n        // FireFox uses this awesome columnNumber property for its top frame\n        // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n        // so adding 1\n        // NOTE: this hack doesn't work if top-most frame is eval\n        stack[0].column = (ex.columnNumber as number) + 1;\n      }\n      element = {\n        url: parts[3],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: parts[2] ? parts[2].split(',') : [],\n        line: parts[4] ? +parts[4] : null,\n        column: parts[5] ? +parts[5] : null,\n      };\n    } else {\n      continue;\n    }\n\n    if (!element.func && element.line) {\n      element.func = UNKNOWN_FUNCTION;\n    }\n\n    stack.push(element);\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction computeStackTraceFromStacktraceProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stacktrace) {\n    return null;\n  }\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace;\n  const opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n  const opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\((.*)\\))? in (.*):\\s*$/i;\n  const lines = stacktrace.split('\\n');\n  const stack = [];\n  let parts;\n\n  for (let line = 0; line < lines.length; line += 2) {\n    let element = null;\n    if ((parts = opera10Regex.exec(lines[line]))) {\n      element = {\n        url: parts[2],\n        func: parts[3],\n        args: [],\n        line: +parts[1],\n        column: null,\n      };\n    } else if ((parts = opera11Regex.exec(lines[line]))) {\n      element = {\n        url: parts[6],\n        func: parts[3] || parts[4],\n        args: parts[5] ? parts[5].split(',') : [],\n        line: +parts[1],\n        column: +parts[2],\n      };\n    }\n\n    if (element) {\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n      stack.push(element);\n    }\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** Remove N number of frames from the stack */\nfunction popFrames(stacktrace: StackTrace, popSize: number): StackTrace {\n  try {\n    return {\n      ...stacktrace,\n      stack: stacktrace.stack.slice(popSize),\n    };\n  } catch (e) {\n    return stacktrace;\n  }\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extractMessage(ex: any): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n","import { Event, Exception, StackFrame } from '@sentry/types';\nimport { extractExceptionKeysForMessage, isEvent, normalizeToSize } from '@sentry/utils';\n\nimport { computeStackTrace, StackFrame as TraceKitStackFrame, StackTrace as TraceKitStackTrace } from './tracekit';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromStacktrace(stacktrace: TraceKitStackTrace): Exception {\n  const frames = prepareFramesForEvent(stacktrace.stack);\n\n  const exception: Exception = {\n    type: stacktrace.name,\n    value: stacktrace.message,\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  rejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            rejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromStacktrace(stacktrace: TraceKitStackTrace): Event {\n  const exception = exceptionFromStacktrace(stacktrace);\n\n  return {\n    exception: {\n      values: [exception],\n    },\n  };\n}\n\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack: TraceKitStackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].func || '';\n  const lastFrameFunction = localStack[localStack.length - 1].func || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(\n      (frame: TraceKitStackFrame): StackFrame => ({\n        colno: frame.column === null ? undefined : frame.column,\n        filename: frame.url || localStack[0].url,\n        function: frame.func || '?',\n        in_app: true,\n        lineno: frame.line === null ? undefined : frame.line,\n      }),\n    )\n    .reverse();\n}\n","import { Event, EventHint, Options, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { computeStackTrace } from './tracekit';\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromException(options: Options, exception: unknown, hint?: EventHint): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(exception, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  addExceptionMechanism(event, {\n    handled: true,\n    type: 'generic',\n  });\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  options: Options,\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(message, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  options: {\n    rejection?: boolean;\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    // eslint-disable-next-line no-param-reassign\n    exception = errorEvent.error;\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n    // then we just extract the name and message, as they don't provide anything else\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n    const domException = exception as DOMException;\n    const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n    const message = domException.message ? `${name}: ${domException.message}` : name;\n\n    event = eventFromString(message, syntheticException, options);\n    addExceptionTypeValue(event, message);\n    return event;\n  }\n  if (isError(exception as Error)) {\n    // we have a real Error object, do nothing\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it is plain Object or Event, serialize it manually and extract options\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(objectException, syntheticException, options.rejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, options);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  input: string,\n  syntheticException?: Error,\n  options: {\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (options.attachStacktrace && syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n","import { API } from '@sentry/core';\nimport { Event, Response, Transport, TransportOptions } from '@sentry/types';\nimport { PromiseBuffer, SentryError } from '@sentry/utils';\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: API;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<Response> = new PromiseBuffer(30);\n\n  public constructor(public options: TransportOptions) {\n    this._api = new API(this.options.dsn);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n}\n","import { eventToSentryRequest } from '@sentry/core';\nimport { Event, Response, Status } from '@sentry/types';\nimport { getGlobalObject, logger, parseRetryAfterHeader, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject<Window>();\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const sentryReq = eventToSentryRequest(event, this._api);\n\n    const options: RequestInit = {\n      body: sentryReq.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        global\n          .fetch(sentryReq.url, options)\n          .then(response => {\n            const status = Status.fromHttpCode(response.status);\n\n            if (status === Status.Success) {\n              resolve({ status });\n              return;\n            }\n\n            if (status === Status.RateLimit) {\n              const now = Date.now();\n              /**\n               * \"The name is case-insensitive.\"\n               * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n               */\n              const retryAfterHeader = response.headers.get('Retry-After');\n              this._disabledUntil = new Date(now + parseRetryAfterHeader(now, retryAfterHeader));\n              logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n            }\n\n            reject(response);\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n","import { eventToSentryRequest } from '@sentry/core';\nimport { Event, Response, Status } from '@sentry/types';\nimport { logger, parseRetryAfterHeader, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const sentryReq = eventToSentryRequest(event, this._api);\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = (): void => {\n          if (request.readyState !== 4) {\n            return;\n          }\n\n          const status = Status.fromHttpCode(request.status);\n\n          if (status === Status.Success) {\n            resolve({ status });\n            return;\n          }\n\n          if (status === Status.RateLimit) {\n            const now = Date.now();\n            /**\n             * \"The search for the header name is case-insensitive.\"\n             * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader\n             */\n            const retryAfterHeader = request.getResponseHeader('Retry-After');\n            this._disabledUntil = new Date(now + parseRetryAfterHeader(now, retryAfterHeader));\n            logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n          }\n\n          reject(request);\n        };\n\n        request.open('POST', sentryReq.url);\n        for (const header in this.options.headers) {\n          if (this.options.headers.hasOwnProperty(header)) {\n            request.setRequestHeader(header, this.options.headers[header]);\n          }\n        }\n        request.send(sentryReq.body);\n      }),\n    );\n  }\n}\n","import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options, exception, hint);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options, message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n}\n","import { API, captureException, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport { addExceptionMechanism, addExceptionTypeValue, logger } from '@sentry/utils';\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const sentryWrapped: WrappedFunction = function(this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return fn.handleEvent.apply(this, wrappedArguments);\n      }\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined);\n            addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: args,\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * Injects the Report Dialog script\n * @hidden\n */\nexport function injectReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    logger.error(`Missing eventId option in showReportDialog call`);\n    return;\n  }\n  if (!options.dsn) {\n    logger.error(`Missing dsn option in showReportDialog call`);\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.async = true;\n  script.src = new API(options.dsn).getReportDialogEndpoint(options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  (document.head || document.body).appendChild(script);\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n        const error = data.error;\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)\n          : this._enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error, undefined, {\n                attachStacktrace: client && client.getOptions().attachStacktrace,\n                rejection: false,\n              }),\n              data.url,\n              data.line,\n              data.column,\n            );\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n      },\n      type: 'error',\n    });\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (e: any) => {\n        let error = e;\n\n        // dig the object of the rejection out of known event types\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          }\n          // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {\n          // no-empty\n        }\n\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromIncompleteRejection(error)\n          : eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: true,\n            });\n\n        event.level = Severity.Error;\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n\n        return;\n      },\n      type: 'unhandledrejection',\n    });\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    if (isString(message)) {\n      const groups = message.match(ERROR_TYPES_RE);\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * This function creates an Event from an TraceKitStackTrace that has part of it missing.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _eventFromIncompleteRejection(error: any): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            value: `Non-Error promise rejection captured with value: ${error}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', this._wrapRAF.bind(this));\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this));\n    }\n\n    if (this._options.eventTarget) {\n      const eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(this._wrapEventTarget.bind(this));\n    }\n  }\n\n  /** JSDoc */\n  private _wrapTimeFunction(original: () => void): () => number {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, ...args: any[]): number {\n      const originalCallback = args[0];\n      args[0] = wrap(originalCallback, {\n        mechanism: {\n          data: { function: getFunctionName(original) },\n          handled: true,\n          type: 'instrument',\n        },\n      });\n      return original.apply(this, args);\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _wrapRAF(original: any): (callback: () => void) => any {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, callback: () => void): () => void {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return original.call(\n        this,\n        wrap(callback, {\n          mechanism: {\n            data: {\n              function: 'requestAnimationFrame',\n              handler: getFunctionName(original),\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n      );\n    };\n  }\n\n  /** JSDoc */\n  private _wrapEventTarget(target: string): void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const global = getGlobalObject() as { [key: string]: any };\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = global[target] && global[target].prototype;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (eventName: string, fn: EventListenerObject, options?: boolean | AddEventListenerOptions) => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n        try {\n          if (typeof fn.handleEvent === 'function') {\n            fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n              mechanism: {\n                data: {\n                  function: 'handleEvent',\n                  handler: getFunctionName(fn),\n                  target,\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            });\n          }\n        } catch (err) {\n          // can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        return original.call(\n          this,\n          eventName,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          wrap((fn as any) as WrappedFunction, {\n            mechanism: {\n              data: {\n                function: 'addEventListener',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n          options,\n        );\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        try {\n          original.call(this, eventName, ((fn as unknown) as WrappedFunction).__sentry_wrapped__, options);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, fn, options);\n      };\n    });\n  }\n\n  /** JSDoc */\n  private _wrapXHR(originalSend: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: XMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n      xmlHttpRequestProps.forEach(prop => {\n        if (prop in xhr && typeof xhr[prop] === 'function') {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fill(xhr, prop, function(original: WrappedFunction): () => any {\n            const wrapOptions = {\n              mechanism: {\n                data: {\n                  function: prop,\n                  handler: getFunctionName(original),\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            };\n\n            // If Instrument integration has been called before TryCatch, get the name of original function\n            if (original.__sentry_original__) {\n              wrapOptions.mechanism.data.handler = getFunctionName(original.__sentry_original__);\n            }\n\n            // Otherwise wrap directly\n            return wrap(original, wrapOptions);\n          });\n        }\n      });\n\n      return originalSend.apply(this, args);\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean;\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node)\n        : htmlTreeAsString((handlerData.event as unknown) as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: {\n            method,\n            url,\n            status_code,\n          },\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n          input: body,\n        },\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: handlerData.fetchData,\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self._handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException as ExtendedError, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = event.request?.url || global.location?.href;\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...event.request?.headers,\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","export const SDK_NAME = 'sentry.javascript.browser';\nexport const SDK_VERSION = '5.24.2';\n","import { BaseClient, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject, SyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  initAndBind(BrowserClient, options);\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n","export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instanciate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instanciate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  const hub = getCurrentHub();\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"names":["LogLevel","Severity","Status","isError","wat","Object","prototype","toString","call","isInstanceOf","Error","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isEvent","Event","isElement","Element","isThenable","Boolean","then","base","_e","htmlTreeAsString","elem","currentElem","MAX_TRAVERSE_HEIGHT","MAX_OUTPUT_LEN","out","height","len","separator","sepLength","length","nextStr","_htmlElementAsString","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","toLowerCase","id","split","allowedAttrs","getAttribute","level","Debug","Info","Warning","Fatal","Critical","Log","code","Success","RateLimit","Invalid","Failed","Unknown","setPrototypeOf","__proto__","Array","obj","proto","prop","hasOwnProperty","SentryError","[object Object]","message","super","this","name","constructor","DSN_REGEX","ERROR_MESSAGE","Dsn","from","_fromString","_fromComponents","_validate","withPassword","host","path","pass","port","projectId","protocol","user","str","match","exec","lastPath","slice","pop","projectMatch","components","forEach","component","isNaN","parseInt","Memo","_hasWeakSet","WeakSet","_inner","has","add","delete","splice","defaultFunctionName","getFunctionName","fn","e","truncate","max","substr","safeJoin","input","delimiter","isArray","output","value","String","isMatchingPattern","pattern","test","indexOf","fill","source","replacement","original","wrapped","defineProperties","__sentry_original__","enumerable","_Oo","getWalkSource","error","err","stack","event","type","target","currentTarget","CustomEvent","detail","jsonSize","encodeURI","utf8Length","JSON","stringify","normalizeToSize","object","depth","maxSize","serialized","normalize","normalizeValue","_events","global","window","document","walk","Infinity","memo","normalized","serializeValue","toJSON","acc","memoize","innerKey","unmemoize","parse","extractExceptionKeysForMessage","exception","maxLength","keys","sort","includedKeys","isNodeEnv","process","fallbackGlobalObject","getGlobalObject","self","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","replace","c","r","Math","random","parseUrl","url","query","fragment","relative","getEventDescription","values","event_id","consoleSandbox","callback","originalConsole","console","wrappedLevels","result","addExceptionTypeValue","addExceptionMechanism","mechanism","INITIAL_TIME","Date","now","prevNow","performanceFallback","timeOrigin","crossPlatformPerformance","navigator","product","isReactNative","performance","INITIAL_OFFSET","getReactNativePerformanceWrapper","mod","request","require","dynamicRequire","module","_","undefined","timing","navigationStart","timestampWithMs","defaultRetryAfter","parseRetryAfterHeader","header","headerDelay","headerDate","PREFIX","__SENTRY__","logger","_enabled","args","log","warn","States","SyncPromise","executor","PENDING","_setResult","RESOLVED","reason","REJECTED","state","_state","_resolve","_reject","_value","_executeHandlers","handler","_handlers","concat","cachedHandlers","done","onfulfilled","onrejected","resolve","reject","collection","TypeError","counter","resolvedCollection","item","index","_attachHandler","val","onfinally","isRejected","PromiseBuffer","_limit","task","isReady","_buffer","remove","timeout","capturedSetTimeout","setTimeout","all","clearTimeout","supportsFetch","Headers","Request","Response","isNativeFetch","func","supportsReferrerPolicy","referrerPolicy","handlers","instrumented","instrument","originalConsoleLevel","triggerHandlers","Function","apply","instrumentConsole","addEventListener","domEventHandler","bind","keypressEventHandler","eventName","options","handleEvent","innerOriginal","__sentry_wrapped__","instrumentDOM","requestKeys","requestValues","xhrproto","XMLHttpRequest","originalOpen","xhr","__sentry_xhr__","method","toUpperCase","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","status","requestPos","body","endTimestamp","startTimestamp","onreadystatechange","readyStateArgs","originalSend","instrumentXHR","fetch","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","supportsNativeFetch","originalFetch","commonHandlerData","fetchData","getFetchMethod","getFetchUrl","response","instrumentFetch","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","supportsHistory","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","lastHref","to","location","href","instrumentHistory","_oldOnErrorHandler","onerror","msg","line","column","arguments","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","data","fetchArgs","debounceDuration","keypressTimeout","lastCapturedEvent","debounceTimer","debounce","isContentEditable","Scope","scope","newScope","_breadcrumbs","_tags","_extra","_contexts","_user","_level","_span","_transactionName","_fingerprint","_eventProcessors","_scopeListeners","_notifyScopeListeners","tags","extras","extra","fingerprint","setTransactionName","context","span","getSpan","spanRecorder","spans","captureContext","updatedScope","contexts","breadcrumb","maxBreadcrumbs","mergedBreadcrumb","timestamp","hint","transaction","trace","getTraceContext","_applyFingerprint","breadcrumbs","_notifyEventProcessors","getGlobalEventProcessors","processors","processor","final","_notifyingListeners","globalEventProcessors","addGlobalEventProcessor","API_VERSION","DEFAULT_BREADCRUMBS","MAX_BREADCRUMBS","Hub","client","_version","_stack","bindClient","version","getStackTop","setupIntegrations","getStack","parentScope","clone","getClient","pushScope","popScope","eventId","_lastEventId","finalHint","syntheticException","originalException","_invokeClient","top","beforeBreadcrumb","getOptions","finalBreadcrumb","addBreadcrumb","min","setUser","setTags","setExtras","setTag","setExtra","setContext","oldHub","makeMain","integration","getIntegration","_callExtensionMethod","customSamplingContext","sentry","getMainCarrier","extensions","carrier","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","hasHubOnCarrier","isOlderThan","activeDomain","domain","active","getActiveDomain","registryHubTopStack","getHubFromActiveDomain","callOnHub","captureException","withScope","SENTRY_API_VERSION","API","dsn","_dsnObject","_getIngestEndpoint","getStoreEndpoint","_encodedAuth","_getEnvelopeEndpoint","clientName","clientVersion","Content-Type","X-Sentry-Auth","dialogOptions","endpoint","getBaseApiEndpoint","encodedOptions","encodeURIComponent","email","auth","sentry_key","sentry_version","map","installedIntegrations","integrations","defaultIntegrations","userIntegrations","userIntegrationsNames","pickedIntegrationsNames","defaultIntegration","userIntegration","integrationsNames","getIntegrationsToSetup","setupOnce","setupIntegration","BaseClient","backendClass","_backend","_options","_dsn","_processing","_getBackend","eventFromException","captureEvent","eventFromMessage","_processEvent","finalEvent","_isClientProcessing","clearInterval","interval","getTransport","close","transportFlushed","ready","flush","enabled","_isEnabled","_integrations","ticked","setInterval","normalizeDepth","prepared","_applyClientOptions","_applyIntegrationsMetadata","finalScope","update","applyToEvent","evt","_normalizeEvent","b","environment","release","dist","maxValueLength","sdkInfo","sdk","integrationsArray","sendEvent","beforeSend","sampleRate","isTransaction","_prepareEvent","__sentry__","_sendEvent","beforeSendResult","_handleAsyncBeforeSend","processedEvent","NoopTransport","Skipped","BaseBackend","_transport","_setupTransport","_exception","_hint","_message","eventToSentryRequest","api","useEnvelope","req","getEnvelopeEndpointWithUrlEncodedAuth","getStoreEndpointWithUrlEncodedAuth","envelope","sent_at","toISOString","originalFunctionToString","FunctionToString","DEFAULT_IGNORE_ERRORS","InboundFilters","clientOptions","_mergeOptions","_shouldDropEvent","_isSentryError","_isIgnoredError","_isDeniedUrl","_getEventFilterUrl","_isAllowedUrl","ignoreInternal","ignoreErrors","_getPossibleEventMessages","some","denyUrls","allowUrls","whitelistUrls","blacklistUrls","oO","stacktrace","frames","filename","UNKNOWN_FUNCTION","gecko","winjs","geckoEval","chromeEval","reactMinifiedRegexp","computeStackTrace","ex","popSize","framesToPop","opera10Regex","opera11Regex","lines","parts","element","extractMessage","computeStackTraceFromStacktraceProp","popFrames","isEval","submatch","isNative","columnNumber","computeStackTraceFromStackProp","failed","STACKTRACE_LIMIT","exceptionFromStacktrace","prepareFramesForEvent","eventFromStacktrace","localStack","firstFrameFunction","lastFrameFunction","frame","colno","function","in_app","lineno","eventFromUnknownInput","attachStacktrace","handled","eventFromString","domException","rejection","__serialized__","eventFromPlainObject","synthetic","BaseTransport","_api","drain","FetchTransport","_disabledUntil","Promise","sentryReq","fetchParameters","assign","headers","fromHttpCode","retryAfterHeader","get","catch","XHRTransport","getResponseHeader","open","setRequestHeader","send","BrowserBackend","transportOptions","transport","ignoreOnError","shouldIgnoreOnError","wrap","before","sentryWrapped","wrappedArguments","arg","addEventProcessor","property","defineProperty","getOwnPropertyDescriptor","configurable","injectReportDialog","script","async","src","getReportDialogEndpoint","onLoad","onload","GlobalHandlers","stackTraceLimit","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","_onErrorHandlerInstalled","currentHub","hasIntegration","isFailedOwnDelivery","_eventFromIncompleteOnError","_enhanceEventWithInitialFrame","_onUnhandledRejectionHandlerInstalled","_eventFromIncompleteRejection","ERROR_TYPES_RE","groups","getLocationHref","DEFAULT_EVENT_TARGET","TryCatch","eventTarget","requestAnimationFrame","_wrapTimeFunction","_wrapRAF","_wrapXHR","_wrapEventTarget","originalCallback","wrapOptions","Breadcrumbs","dom","category","_consoleBreadcrumb","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","handlerData","fromString","parsedLoc","parsedFrom","parsedTo","DEFAULT_KEY","DEFAULT_LIMIT","LinkedErrors","_key","limit","_handler","linkedErrors","_walkErrorTree","UserAgent","referrer","userAgent","Referer","User-Agent","SDK_NAME","SDK_VERSION","BrowserClient","getDsn","platform","packages","addSentryBreadcrumb","CoreIntegrations.InboundFilters","CoreIntegrations.FunctionToString","windowIntegrations","_window","Sentry","Integrations","INTEGRATIONS","CoreIntegrations","BrowserIntegrations","SENTRY_RELEASE","clientClass","debug","enable","initAndBind","lastEventId","showReportDialog","internalWrap"],"mappings":"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"}